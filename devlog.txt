r3d3
    khyberS - Khyber Sen
    queenieX - Queenie Xiang
    anishS - Anish Shenoy
    kellyW - Kelly Wang

           .--,-``-.                         .--,-``-.
          /   /     '.                      /   /     '.
         / ../        ;               ,---,/ ../        ;
  __  ,-.\ ``\  .`-    '            ,---.'|\ ``\  .`-    '
,' ,'/ /| \___\/   \   :            |   | : \___\/   \   :
'  | |' |      \   :   |            |   | |      \   :   |
|  |   ,'      /  /   /           ,--.__| |      /  /   /
'  :  /        \  \   \          /   ,'   |      \  \   \
|  | '     ___ /   :   |        .   '  /  |  ___ /   :   |
;  : |    /   /\   /   :        '   ; |:  | /   /\   /   :
|  , ;   / ,,/  ',-    .        |   | '/  '/ ,,/  ',-    .
 ---'    \ ''\        ;         |   :    :|\ ''\        ;
          \   \     .'           \   \  /   \   \     .'
           `--`-,,-'              `----'     `--`-,,-'

                        /[] _ _\
                       _|_o_LII|_
                      / | ==== | \
                      |_| ==== |_|
                       ||" ||  ||
                       ||LI  o ||
                       ||'----'||
                      /__|    |__\

============================================================
khyberS -- 2018-03-28 23:35:00

Created devlog.txt.

============================================================
kellyW, anishS, khyberS -- 2018-03-29 12:54:00

Chose data and outlined project description in README.

============================================================
khyberS -- 2018-03-29 17:38:00

Fixed changes in README in response to issues.

============================================================
khyberS -- 2018-03-30 23:35:00

Setup project files:

    package.json is for npm modules/dependencies like TypeScript, Webpack, and d3
    package-lock.json is autogenerated by npm
    tsconfig.json is for tsc, the TypeScript compiler
    webpack.config.js is for Webpack

    dist/ is for compiled files (e.x. minified JS)
    src/ is for all source files we write
        python/ is for all python flask files
            /util is for all utilities, like our own library modules
            /core is for all the modules that are directly related to this project
            app.py will be minimal, mostly just importing and call a "main()" from core/
        data/ is for all the raw data
        ts/ is for TypeScript (preferred over and compiled to JS)
        html/ is for HTML
        css/ is for CSS

============================================================
khyberS -- 2018-03-30 23:35:00

Ported some old TS util files in src/ts/util.

============================================================
khyberS -- 2018-04-03 22:25:00

Added actual data sets for flight delays in src/data.

The main file, flight.csv, is almost 600 MB, too big for Github,
so I had to use Git LFS (large file storage) to upload/link it to the repo.
When cloning, make sure to download and turn on Git LFS first.

Added DsvMissingDataStats, which I used to quickly analyze flights.csv
to determine which columns should be ignored
and how many full flight records we have (~6 million).

============================================================
khyberS -- 2018-04-04 18:13:00

Created src/cpp/BinaryFlightDelays, which will convert the 600 MB flights.csv
into a compact binary form containing only the needed data.
Loading a 600 MB file into the browser is very slow.
Manipulating such large, unstructured data will be very slow, too,
and it can often crash the browser (this happened while testing it).

I'm using C++ for this right now, because it's much easier to organize the data
into a compact binary format when there's a strong type system
with all the different types of signed, unsigned, and different-sized integers.
Perhaps, WebAssembly can also be used to performantly access this data in the browser, too,
and interop with the main JavaScript.

After examining the data in flight.csv:

Fields:
    year;
    month;
    dayOfMonth;
    dayOfWeek;
    airline;
    flightNumber;
    tailNumber;
    originAirport;
    destinationAirport;
    scheduledDepartureTime; // hhmm
    departureTime; // hhmm
    departureDelay; // -m*
    taxiOut; // m*
    wheelsOff; // mmmm
    scheduledTime; // m*
    elapsedTime; // m*
    airTime; // m*
    distance; // miles
    wheelsOn; // mmmm
    taxiOn; // m*
    scheduledArrivalTime; // hhmm
    arrivalTime; // hhmm
    arrivalDelay; // -m*
    diverted; // 0|1
    cancelled; // 0|1

ignored b/c not enough data:
    CANCELLATION_REASON
    AIR_SYSTEM_DELAY
    SECURITY_DELAY
    AIRLINE_DELAY
    LATE_AIRCRAFT_DELAY
    WEATHER_DELAY

I think these are the most useful fields,
the only fields we should be processing and displaying in any capacity.
Is there anything I'm missing or overlooking?
Are there any other important fields that can't be calculated from these?
Are there any other fields we can eliminate?

Useful fields:
 - day of year
 - airline
 - origin airport
 - destination airport
 - departureTime
 - arrivalTime
 - departureDelay / elapsedTime
 - arrivalDelay

Using this data, I also think these are some more specific things
that we should be calculating and showing the user:

    Use both the delays at departure and arrival.

    Color the planes based on how delayed they are:
        red = delayed
        green = on time
        (just like traffic)

    The color of the plane transitions throughout its flight,
    from the departure delay color to the arrival delay color.
    While in flight, the color will also fade out,
    so that the delay color is primarily concentrated
    near the airport that the delay should be associated with.

    The color delays at airports will build up over time,
    so that it is easy to visualize which airports are the most delayed.
    This means that, when delayed at an airport, a plane will leave behind
    a spreading residue of its delay color.

    The delay of an airport will be calculated multiple ways,
    which can be selected by the user:
        by percentage of delayed flights
        by severity of the delays
        by the raw number of delays

    There will also be a filter for a delay tolerance,
    where the user can say, for example, ignore delays that are less than 10 minutes.
    As a more advanced feature, the user will also have the option of entering
    a custom function that calculates how heavily a certain delay is weighed,
    that a function: (delayInMinutes: int) => severity: double.

    There will be a color key/legend mapping the color of a delay
    to how long the delay is, and this legend will adjust
    depending on what delay function the user selects.

    There will be a separate view (almost a separate page)
    that will show a bar chart for each airport, airline, etc. (whatever the user chooses)
    displaying how delayed that airport, etc. was,
    again depending on the delay function the user chooses.

    There will be a timeline above the map (for 2015, that's what our data has)
    that has three markers:
        two markers that designate the viewing period
        one marker in between that designates the current time
    The two outer markers begin at the ends of the timeline
    and can be placed by the user to change the viewing period.
    When the user clicks play, the flights, etc. are animated
    and the time marker progresses from the start to end marker.

    The time marker can also be dragged to any time at at any speed,
    which will be proportional to the speed of the animation,
    just like you can drag the cursor through a movie, for example.
    The farther the actual mouse is from the time marker, however,
    the slower the animation time progresses, just like in many video players.
    However, since the animation can only be run so fast,
    there is a maximum speed at which it can be dragged.
    If the user tries to drag it any faster, it just won't move.

    Each time the time period selection changes or any of the other settings/filters are changed,
    the animation must be reset, re-calculated, and rerun.
    I think it would be way to complicated to keep track of the parts
    that have to be adjusted, and it would be much easier to just restart everything.

============================================================
khyberS -- 2018-04-06 05:32:00

Wrote most of the C++/Wasm code:

    The C++ code has parts that run solely on the server
    to analyze and optimize the data/code,
    and parts that will be compiled to Wasm to interop with JS in the browser.

    I managed to compress each flight into 13 bytes
    (with ~6 mil flights that's ~78 MB, which is a lot less than 600 MB)
    with a simple Wasm API exposing the data of each flight.

    After more analysis of the data, which I have C++ code to do,
    I can figure out how to compress the data into even less bytes by packing each bit.

    All the code up to this point is written,
    but I haven't managed to compile all of it,
    not to mention testing it all.

Even the storage size isn't a problem anymore,
we still have 6 million flights that we have to analyze in real time.

I think the Wasm can be definitely leveraged to speed things up,
and especially offer more consistent performance
with lower latency that the user won't notice as much.

Instead of exposing all the flights stored in Wasm to JS
and letting the JS access it through interop'ing,
the computation can be moved to Wasm
while still letting the JS control
how the data is filtered, transformed, and rendered.

I'm not sure exactly how this will work out yet,
but I think things like filtering,
of which there are only a set number of possible filters,
can be easily moved to Wasm for computation,
but other parts will be much harder and would require
an interpreter/compiler of sorts implemented in Wasm.
Instead, we can just pass a JS function to the Wasm code in those cases.

============================================================
anishS - 2018-04-12 22:22:00

Added some D3 animations. I'm using small, blue svg rectangles to represent planes. 
There is a "plane" generated at every airport when the page is launched.
When the fly button is clicked, the planes start flying
As of right now, I have them flying to some other arbitrary airport in the coordinates array. 
